// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  credits       Int       @default(10)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  chats    Chat[]
  videos   Video[]
  photos   Photo[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id        String   @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  role      MessageRole
  chatId    String
  createdAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  prompt      String   @db.Text
  videoUrl    String?
  thumbnailUrl String?
  status      VideoStatus @default(PENDING)
  userId      String
  type        VideoType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model Photo {
  id          String   @id @default(cuid())
  title       String
  description String?
  photoUrl    String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model EnterpriseInquiry {
  id                String   @id @default(cuid())
  firstName         String
  lastName          String
  email             String
  phone             String?
  company           String
  website           String?
  service           EnterpriseServiceType
  budget            String
  timeline          String
  teamSize          String
  currentChallenges String   @db.Text
  goals             String   @db.Text
  status            InquiryStatus @default(NEW)
  priority          InquiryPriority @default(MEDIUM)
  source            String
  assignedTo        String?
  notes             String?  @db.Text
  lastContact       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("enterprise_inquiries")
}

enum UserRole {
  USER
  ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
}

enum VideoStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum VideoType {
  TEXT_TO_VIDEO
  PHOTO_TO_VIDEO
}

enum EnterpriseServiceType {
  AI_COLD_DM
  AI_MARKETING_PLATFORM
}

enum InquiryStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  CLOSED
  LOST
}

enum InquiryPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
